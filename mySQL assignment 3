Use prints;

-- Assigment 3 


-- 1.  Create a view named Under_100. It consists of the item_id, title, artist, unit_price and order_qty for every print with a unit_price under 100 dollars.
CREATE VIEW Under_100 AS 
SELECT items.itemsid, title, artist, unitprice, orderqry 
FROM items 
INNER JOIN orderline ON items.itemsid = orderline.itemsid 
WHERE unitprice < 100;

--   2.  Create a view named Allen. It consists of the customer_id, customer_name, customer_phone, title, and artist of each print ordered.  
CREATE VIEW Allen AS
SELECT customer.customerid, customername, phone, title, artist
FROM (((customer INNER JOIN orders ON customer.customerid = orders.customerid) 
JOIN orderline ON orderline.orderid = orders.orderid) 
JOIN items ON items.itemsid = orderline.itemsid); 

-- 3.  Create a view named orders. It consists of the item_id, title, artist, unit_price and order_qty for every print ordered in the range of 2014-01-01 and 2014-02-28. 
CREATE VIEW orders AS
SELECT items.itemsid, title, artist, unitprice, orderqry, orderdate
FROM ((items JOIN orderline ON items.itemsid = orderline.itemsid) 
JOIN orders ON orders.orderid = orderline.orderid) 
WHERE orders.orderdate BETWEEN '2014-01-01' AND '2014-02-28';

-- 4.  Create a view named zip_27. It consists of the customer_name, customer_phone, title, artist and date_shipped of each print ordered by a customer whose zip code begins with 27. 
CREATE VIEW zip_27 AS
SELECT customername, phone, title, artist, shipdate 
FROM (((customer JOIN orders ON customer.customerid = orders.customerid) 
JOIN orderline ON orderline.orderid = orders.orderid) 
JOIN items ON items.itemsid = orderline.itemsid)
WHERE postalcode LIKE '27%';

-- 5.  Create the following indexes. Use the indicated index name. 
-- a.  Create an index named customer_id on the customer_id field in the customers table. 
-- b.  Create an index named name on the customer_name field in the customers table. 
-- c.   Create an index named shipped on the customer_id and ship_date in the orders table. 
CREATE INDEX customerid ON customer (customerid);
CREATE INDEX name ON customer (customername);
CREATE INDEX shipped ON orders (customerid, shipdate);

-- 6.  Drop the name index.
ALTER TABLE customer DROP INDEX name;-- Drop 

--  7.  Specify the integrity constraint that the unit_price of any print must be more than $35.
ALTER TABLE items ADD CHECK (unitprice > 35); -- Drop 

--  8.  Create the following foreign keys within the prints database.     
-- a. customer_id is a foreign key in the orders table.
-- b. Item_id is a foreign key in the orderline table. 
ALTER TABLE orders     ADD FOREIGN KEY (customerid) REFERENCES customer(customerid);
ALTER TABLE orderline ADD FOREIGN KEY (itemsid)       REFERENCES items(itemsID);

-- 9.  Add to the items table a new character field named type that is one character in length. 
ALTER TABLE items ADD type CHAR(1);

-- 10. Change the type field in the items table to M for the print titled Skies Above. 
UPDATE items
SET type = 'M'
WHERE Title = 'Skies Above';

-- 11. Change the length of the artist field in the items table to 30. 
ALTER TABLE items MODIFY column artist CHAR(30);

-- 12. What command would you use to delete the orders table from the prints database? (Do not delete the orders table.) 
-- DROP TABLE orders;
